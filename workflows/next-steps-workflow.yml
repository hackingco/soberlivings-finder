# Next Steps Workflow Pipeline
# Automated workflow for Sober Living Facilities Finder
# Generated by SPARC Workflow Manager

name: Next Steps Deployment Workflow
version: 1.0.0
description: Comprehensive workflow for completing project deployment

# Workflow Triggers
triggers:
  - type: manual
    name: start_workflow
  - type: schedule
    cron: "0 9 * * 1" # Weekly on Monday 9 AM
  - type: webhook
    endpoint: /api/workflow/trigger

# Global Configuration
config:
  parallel_execution: true
  max_retries: 3
  notification_channels:
    - email
    - slack
  rollback_enabled: true

# Workflow Stages
stages:
  # Stage 1: Data Population
  - id: data_population
    name: "Populate Database with Facilities"
    type: sequential
    tasks:
      - name: fetch_facilities_data
        command: |
          node src/fetchFacilities.js \
            --location "San Francisco, CA" \
            --radius 50 \
            --limit 100
        timeout: 300s
        retry: 3
      
      - name: import_to_database
        command: |
          docker exec soberlivings_frontend \
            npm run db:seed
        depends_on: [fetch_facilities_data]
        
      - name: verify_data_import
        command: |
          docker exec soberlivings_postgres \
            psql -U postgres -d soberlivings \
            -c "SELECT COUNT(*) FROM facilities;"
        validation:
          min_records: 50

  # Stage 2: API Testing
  - id: api_testing
    name: "Automated API Testing"
    type: parallel
    tasks:
      - name: health_check_tests
        command: npm run test:health
        directory: frontend
        
      - name: integration_tests
        command: npm run test:integration
        directory: frontend
        
      - name: load_testing
        command: |
          npx artillery run tests/load/api-load-test.yml
        conditions:
          - health_check_tests.success
          
      - name: security_scanning
        command: |
          npm audit --audit-level=moderate
        directory: frontend

  # Stage 3: Production Build
  - id: production_build
    name: "Build Production Containers"
    type: sequential
    depends_on: [api_testing]
    tasks:
      - name: build_frontend
        command: |
          docker build \
            -f frontend/Dockerfile \
            -t soberlivings/frontend:latest \
            --build-arg NODE_ENV=production \
            ./frontend
            
      - name: build_nginx
        command: |
          docker build \
            -f nginx/Dockerfile \
            -t soberlivings/nginx:latest \
            ./nginx
            
      - name: push_to_registry
        command: |
          docker tag soberlivings/frontend:latest registry.hub.docker.com/soberlivings/frontend:latest
          docker push registry.hub.docker.com/soberlivings/frontend:latest
        conditions:
          - env.DOCKER_REGISTRY_TOKEN

  # Stage 4: Database Migration
  - id: database_migration
    name: "Production Database Setup"
    type: sequential
    tasks:
      - name: backup_existing
        command: |
          pg_dump $DATABASE_URL > backup-$(date +%Y%m%d).sql
        
      - name: run_migrations
        command: |
          npx prisma migrate deploy --preview-feature
        directory: frontend
        
      - name: verify_schema
        command: |
          npx prisma db pull
          npx prisma validate

  # Stage 5: Monitoring Setup
  - id: monitoring_setup
    name: "Configure Monitoring Stack"
    type: parallel
    tasks:
      - name: deploy_prometheus
        command: |
          docker compose -f docker-compose.monitoring.yml up -d prometheus
          
      - name: deploy_grafana
        command: |
          docker compose -f docker-compose.monitoring.yml up -d grafana
          
      - name: configure_alerts
        command: |
          curl -X POST http://localhost:3001/api/alerts \
            -H "Content-Type: application/json" \
            -d @monitoring/alert-rules.json

  # Stage 6: Production Deployment
  - id: production_deployment
    name: "Deploy to Production"
    type: blue_green
    depends_on: [production_build, database_migration]
    tasks:
      - name: deploy_blue
        command: |
          docker compose -f docker-compose.prod.yml up -d --scale frontend=2
          
      - name: health_check_blue
        command: |
          ./scripts/health-check.sh production
        timeout: 60s
        
      - name: switch_traffic
        command: |
          ./scripts/switch-traffic.sh blue
        depends_on: [health_check_blue]
        
      - name: verify_deployment
        command: |
          curl -f https://soberlivings.com/api/health || exit 1

  # Stage 7: Post-Deployment
  - id: post_deployment
    name: "Post-Deployment Tasks"
    type: sequential
    depends_on: [production_deployment]
    tasks:
      - name: warm_cache
        command: |
          ./scripts/warm-cache.sh
          
      - name: run_smoke_tests
        command: |
          npm run test:smoke
          
      - name: notify_team
        command: |
          ./scripts/notify-deployment.sh success
          
      - name: update_documentation
        command: |
          npm run docs:generate

# Rollback Strategy
rollback:
  trigger_conditions:
    - health_check_failure
    - error_rate > 5%
    - response_time > 2000ms
  
  steps:
    - name: switch_to_previous
      command: ./scripts/switch-traffic.sh green
      
    - name: restore_database
      command: |
        pg_restore -d $DATABASE_URL backup-latest.sql
      
    - name: notify_rollback
      command: |
        ./scripts/notify-deployment.sh rollback

# Success Criteria
success_criteria:
  - all_tests_pass: true
  - deployment_health: healthy
  - error_rate: < 1%
  - response_time_p95: < 500ms
  - uptime: > 99.9%

# Notifications
notifications:
  on_start:
    message: "Deployment workflow started for Sober Living Facilities Finder"
    
  on_success:
    message: "✅ Deployment completed successfully!"
    include_metrics: true
    
  on_failure:
    message: "❌ Deployment failed. Check logs for details."
    include_logs: true
    
  on_rollback:
    message: "⚠️ Deployment rolled back due to issues."