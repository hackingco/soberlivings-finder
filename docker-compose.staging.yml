# Staging Environment Docker Compose Configuration
# Mirrors production with staging-specific settings

networks:
  soberlivings-staging:
    driver: bridge
    ipam:
      config:
        - subnet: 172.26.0.0/16

volumes:
  postgres_staging_data:
  redis_staging_data:
  elasticsearch_staging_data:
  monitoring_staging_data:

services:
  # Application - Staging
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: staging
        NEXT_PUBLIC_API_URL: ${STAGING_API_URL:-http://staging.soberlivings.com/api}
    container_name: soberlivings-staging-app
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      NODE_ENV: staging
      DATABASE_URL: postgresql://${STAGING_DB_USER:-postgres}:${STAGING_DB_PASSWORD:-postgres}@postgres-staging:5432/${STAGING_DB_NAME:-soberlivings_staging}
      REDIS_URL: redis://redis-staging:6379
      NEXT_PUBLIC_API_URL: ${STAGING_API_URL:-http://staging.soberlivings.com/api}
      NEXT_PUBLIC_ENVIRONMENT: staging
      LOG_LEVEL: debug
      ENABLE_METRICS: "true"
      ENABLE_TRACING: "true"
    depends_on:
      postgres-staging:
        condition: service_healthy
      redis-staging:
        condition: service_healthy
    networks:
      soberlivings-staging:
        ipv4_address: 172.26.0.10
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.staging.rule=Host(`staging.soberlivings.com`)"
      - "traefik.http.routers.staging.tls=true"
      - "traefik.http.routers.staging.tls.certresolver=letsencrypt"

  # PostgreSQL - Staging
  postgres-staging:
    image: postgis/postgis:15-3.3
    container_name: soberlivings-staging-postgres
    restart: unless-stopped
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: ${STAGING_DB_NAME:-soberlivings_staging}
      POSTGRES_USER: ${STAGING_DB_USER:-postgres}
      POSTGRES_PASSWORD: ${STAGING_DB_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sh:/docker-entrypoint-initdb.d/00-init.sh:ro
      - ./scripts/staging-seed.sql:/docker-entrypoint-initdb.d/01-seed.sql:ro
    networks:
      soberlivings-staging:
        ipv4_address: 172.26.0.20
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${STAGING_DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 768M

  # Redis - Staging
  redis-staging:
    image: redis:7-alpine
    container_name: soberlivings-staging-redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_staging_data:/data
    networks:
      soberlivings-staging:
        ipv4_address: 172.26.0.21
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  # Elasticsearch - Staging (lighter config)
  elasticsearch-staging:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: soberlivings-staging-elasticsearch
    restart: unless-stopped
    ports:
      - "9201:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - cluster.name=staging-cluster
    volumes:
      - elasticsearch_staging_data:/usr/share/elasticsearch/data
    networks:
      soberlivings-staging:
        ipv4_address: 172.26.0.22
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Nginx - Staging
  nginx-staging:
    image: nginx:alpine
    container_name: soberlivings-staging-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.staging.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl-staging:/etc/nginx/ssl:ro
      - ./nginx/htpasswd:/etc/nginx/htpasswd:ro
    depends_on:
      - app
    networks:
      soberlivings-staging:
        ipv4_address: 172.26.0.30
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.soberlivings.environment=staging"

  # Monitoring - Staging
  prometheus-staging:
    image: prom/prometheus:latest
    container_name: soberlivings-staging-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.staging.yml:/etc/prometheus/prometheus.yml:ro
      - monitoring_staging_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=7d'
    networks:
      soberlivings-staging:
        ipv4_address: 172.26.0.40
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M

  grafana-staging:
    image: grafana/grafana:latest
    container_name: soberlivings-staging-grafana
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${STAGING_GRAFANA_PASSWORD:-staging_admin}
      - GF_INSTALL_PLUGINS=redis-datasource,postgres-datasource
      - GF_SERVER_ROOT_URL=http://staging.soberlivings.com:3003
      - GF_AUTH_BASIC_ENABLED=true
    volumes:
      - monitoring_staging_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana-datasources.staging.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    depends_on:
      - prometheus-staging
    networks:
      soberlivings-staging:
        ipv4_address: 172.26.0.41
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M