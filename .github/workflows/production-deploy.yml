name: Production Deployment Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Deployment strategy'
        required: true
        default: 'blue-green'
        type: choice
        options:
          - blue-green
          - canary
          - rollback

env:
  NODE_VERSION: '20.x'
  POSTGRES_VERSION: '15'
  
jobs:
  # Stage 1: Lint
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Check TypeScript
        run: npm run typecheck

  # Stage 2: Test
  test:
    needs: lint
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: soberlivings_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:unit
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/soberlivings_test
      
      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/soberlivings_test
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info

  # Stage 3: Contract Testing
  contract:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run contract tests
        run: npm run test:contract
      
      - name: Validate OpenAPI spec
        run: npm run validate:openapi

  # Stage 4: E2E Testing
  e2e:
    needs: contract
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright
        run: npx playwright install --with-deps
      
      - name: Build application
        run: npm run build
      
      - name: Run E2E tests
        run: npm run test:e2e
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-results
          path: test-results/

  # Stage 5: Security Scan
  security:
    needs: e2e
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run OWASP dependency check
        run: |
          npm audit --audit-level=moderate
          npm run security:check

  # Stage 6: Build & Push
  build:
    needs: security
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate version
        id: version
        run: echo "version=$(date +%Y%m%d)-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            soberlivings/app:latest
            soberlivings/app:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Stage 7: Database Migration
  migrate:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Backup production database
        run: |
          ./scripts/backup.sh production
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
      
      - name: Run migrations
        run: |
          npm run migrate:deploy
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
      
      - name: Verify migration
        run: |
          npm run migrate:verify
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}

  # Stage 8: Deploy (Blue-Green)
  deploy:
    needs: [build, migrate]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://soberlivings.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          ./scripts/deploy-blue-green.sh \
            --version ${{ needs.build.outputs.version }} \
            --strategy ${{ github.event.inputs.deployment_type || 'blue-green' }}
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          PROD_HOST: ${{ secrets.PROD_HOST }}
      
      - name: Health check
        run: |
          ./scripts/health-check.sh production
        env:
          PROD_URL: https://soberlivings.com
      
      - name: Run smoke tests
        run: |
          npm run test:smoke
        env:
          TEST_URL: https://soberlivings.com

  # Stage 9: Post-Deploy Validation
  validate:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Performance validation
        run: |
          npm run test:performance
        env:
          TEST_URL: https://soberlivings.com
      
      - name: Accessibility validation
        run: |
          npm run test:accessibility
        env:
          TEST_URL: https://soberlivings.com
      
      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed successfully! Version: ${{ needs.build.outputs.version }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Rollback job (manual trigger)
  rollback:
    if: github.event.inputs.deployment_type == 'rollback'
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Execute rollback
        run: |
          ./scripts/rollback.sh --auto
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          PROD_HOST: ${{ secrets.PROD_HOST }}
      
      - name: Verify rollback
        run: |
          ./scripts/health-check.sh production
        env:
          PROD_URL: https://soberlivings.com